{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "resourceEnvironmentName": {
      "type": "string",
      "metadata": {
        "description": "The prefix and environment of the resource."
      }
    },
    "serviceName": {
      "type": "string",
      "metadata": {
        "description": "The abbreviation of the service name to be used when naming a resource."
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the key vault."
      }
    },
    "keyVaultResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The resource group for the key vault."
      }
    },
    "customHostName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The custom hostname to add to the app service."
      }
    },
    "certificateName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The name of the certificate in key vault."
      }
    },
    "authenticationToken": {
      "type": "string",
      "metadata": {
        "description": "Authentication token for api access."
      }
    },
    "dockerHubUsername": {
      "type": "string",
      "metadata": {
        "description": "the username associated with the dockerhub account"
      }
    },
    "containerImageReference": {
      "type": "string",
      "metadata": {
        "description": "The container image to pull from the server. Should be in image:tag format."
      }
    },
    "railsEnv": {
      "type": "string",
      "defaultValue": "production",
      "metadata": {
        "description": "Environment for the rails app."
      }
    },
    "databaseName": {
      "type": "string",
      "metadata": {
        "description": "The name of the database that the app will connect to."
      }
    },
    "databasePort": {
      "type": "string",
      "metadata": {
        "description": "The default port for the psql server."
      }
    },
    "databaseUsername": {
      "type": "string",
      "metadata": {
        "description": "The username used to connect to the database."
      }
    },
    "databasePassword": {
      "type": "string",
      "metadata": {
        "description": "The password used to connect to the database."
      }
    },
    "secretKeyBase": {
      "type": "string",
      "metadata": {
        "description": "Secret Key Base."
      }
    },
    "sentryDSNBackend": {
      "type": "string",
      "metadata": {
        "description": "Connection string for Sentry monitoring for backend app."
      }
    },
    "sentryDSNBGFindSync": {
      "type": "string",
      "metadata": {
        "description": "Connection string for Sentry monitoring for background find sync container."
      }
    },
    "settingsAuthenticationSecret": {
      "type": "string",
      "metadata": {
        "description": "Auth secret for manage back-end."
      }
    },
    "settingsManageApiSecret": {
      "type": "string",
      "metadata": {
        "description": "The secret shared between manage courses backend and manage courses API to authorize requests."
      }
    },
    "settingsSearchApiSecret": {
      "type": "string",
      "metadata": {
        "description": "The secret shared between manage courses backend and search and compare API to authorize requests."
      }
    },
    "databaseServiceName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The abbreviation of the service that contains the database used by this application."
      }
    },
    "appServicePlanSize": {
      "type": "string",
      "allowedValues": [
        "1",
        "2",
        "3"
      ],
      "defaultValue": "1"
    },
    "appServicePlanInstances": {
      "type": "int",
      "defaultValue": 1
    },
    "govukNotifyApiKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The API Key for GOV.UK Notify"
      }
    },
    "govukNotifyWelcomeEmailTemplateId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The GOV.UK Notify template id for the find welcome email"
      }
    },
    "containerInstanceName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Container Instances resource. This will be its identifier in Azure and can be different from the image name."
      }
    },
    "containerName": {
      "type": "string",
      "metadata": {
        "description": "The name or role of the container to identify individual containers in multi-container setup."
      }
    },
    "mcbeSystemAuthenticationToken": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The token used for system level API requests."
      }
    },
    "containerCPUCores": {
      "type": "string",
      "defaultValue": "1",
      "metadata": {
        "description": "The number of CPU cores for Azure Container Instance."
      }
    },
    "containerMemory": {
      "type": "string",
      "defaultValue": "1.5",
      "metadata": {
        "description": "The number of memory in GB for Azure Container Instance."
      }
    },
    "redisCacheName": {
      "type": "string",
      "metadata": {
        "description": "The name of the Azure Redis Cache to create."
      }
    },
    "logstashHost": {
      "type": "string",
      "metadata": {
        "description": "The host name of the logstash server."
      }
    },
    "logstashPort": {
      "type": "string",
      "metadata": {
        "description": "The port number for the logstash server connection."
      }
    },
    "securityAlertEmail": {
      "type": "string",
      "metadata": {
        "description": "The email address to be used for psql security alerts."
      }
    },
    "backgroundContainerImageReference": {
      "type": "string",
      "metadata": {
        "description": "The container image to pull from the server. Should be in image:tag format."
      }
    },
    "vnetProfileName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Virtual network profile name for container instance. This needs to be pre-created see example for help: https://github.com/DFE-Digital/bat-platform-building-blocks/blob/master/templates/container-instance-network-profile.json"
      }
    },
    "vnetResourceGroup": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Virtual network resource group name. This needs to be pre-created. This information is used for network profile resourceid in container instance."
      }
    },
    "vnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Virtual network name. This needs to be pre-created. This information is used for network profile resourceid."
      }
    },
    "vnetSubnetName": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Virtual network name. This needs to be pre-created. This information is used for network profile resourceid."
      }
    },
    "googleCloudPlatformAPIKey": {
      "type": "securestring",
      "metadata": {
        "description": "The API key for Google Cloud Platform."
      }
    }
  },
  "variables": {
    "deploymentUrlBase": "https://raw.githubusercontent.com/DFE-Digital/bat-platform-building-blocks/master/templates/",
    "deploymentUrlBaseDas": "https://raw.githubusercontent.com/SkillsFundingAgency/das-platform-building-blocks/master/templates/",
    "resourceNamePrefix": "[toLower(concat(parameters('resourceEnvironmentName'),'-', parameters('serviceName')))]",
    "keyvaultCertificateName": "[if(greater(length(parameters('certificateName')),0), parameters('certificateName'), replace(parameters('customHostName'), '.', '-'))]",
    "appServiceName": "[concat(variables('resourceNamePrefix'), '-as')]",
    "appServicePlanName": "[concat(variables('resourceNamePrefix'), '-asp')]",
    "appServiceRuntimeStack": "[concat('DOCKER|', parameters('dockerHubUsername'), '/', parameters('containerImageReference'))]",
    "databaseResourceNamePrefix": "[toLower(concat(parameters('resourceEnvironmentName'),'-', parameters('databaseServiceName')))]",
    "databaseServerName": "[concat(variables('databaseResourceNamePrefix'), '-psql')]",
    "databaseUsername": "[concat(parameters('databaseUsername'), '@', variables('databaseServerName'))]",
    "storageAccountName": "[replace(concat(variables('resourceNamePrefix'), 'str'), '-', '')]"
  },
  "resources": [
    {
      "name": "app-service-plan",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'), 'app-service-plan.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appServicePlanName": {
            "value": "[variables('appServicePlanName')]"
          },
          "appServicePlanSize": {
            "value": "[parameters('appServicePlanSize')]"
          },
          "appServicePlanInstances": {
            "value": "[parameters('appServicePlanInstances')]"
          }
        }
      }
    },
    {
      "condition": "[greater(length(parameters('customHostName')), 0)]",
      "name": "app-service-certificate",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'), 'app-service-certificate.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "keyVaultCertificateName": {
            "value": "[variables('keyVaultCertificateName')]"
          },
          "keyVaultName": {
            "value": "[parameters('keyVaultName')]"
          },
          "keyVaultResourceGroup": {
            "value": "[parameters('keyVaultResourceGroup')]"
          }
        }
      }
    },
    {
      "name": "app-service",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'), 'app-service-linux.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appServiceName": {
            "value": "[variables('appServiceName')]"
          },
          "appServicePlanResourceGroup": {
            "value": "[resourceGroup().name]"
          },
          "appServicePlanName": {
            "value": "[variables('appServicePlanName')]"
          },
          "runtimeStack": {
            "value": "[variables('appServiceRuntimeStack')]"
          },
          "appServiceAppMCBE": {
            "value": [
              {
                "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                "value": "[reference('app-insights').outputs.instrumentationKey.value]"
              },
              {
                "name": "RAILS_ENV",
                "value": "[parameters('railsEnv')]"
              },
              {
                "name": "AUTHENTICATION_TOKEN",
                "value": "[parameters('authenticationToken')]"
              },
              {
                "name": "DB_DATABASE",
                "value": "[parameters('databaseName')]"
              },
              {
                "name": "DB_HOSTNAME",
                "value": "[reference('postgresql-server').outputs.fullyQualifiedDomainName.value]"
              },
              {
                "name": "DB_PASSWORD",
                "value": "[parameters('databasePassword')]"
              },
              {
                "name": "DB_USERNAME",
                "value": "[variables('databaseUsername')]"
              },
              {
                "name": "DB_PORT",
                "value": "[parameters('databasePort')]"
              },
              {
                "name": "SECRET_KEY_BASE",
                "value": "[parameters('secretKeyBase')]"
              },
              {
                "name": "SENTRY_DSN",
                "value": "[parameters('sentryDSNBackend')]"
              },
              {
                "name": "SETTINGS__AUTHENTICATION__SECRET",
                "value": "[parameters('settingsAuthenticationSecret')]"
              },
              {
                "name": "SETTINGS__MANAGE_API__SECRET",
                "value": "[parameters('settingsManageApiSecret')]"
              },
              {
                "name": "SETTINGS__SEARCH_API__SECRET",
                "value": "[parameters('settingsSearchApiSecret')]"
              },
              {
                "name": "SETTINGS__GOVUK_NOTIFY__API_KEY",
                "value": "[parameters('govukNotifyApiKey')]"
              },
              {
                "name": "SETTINGS__GOVUK_NOTIFY__WELCOME_EMAIL_TEMPLATE_ID",
                "value": "[parameters('govukNotifyWelcomeEmailTemplateId')]"
              },
              {
                "name": "SETTINGS__SYSTEM_AUTHENTICATION_TOKEN",
                "value": "[parameters('mcbeSystemAuthenticationToken')]"
              },
              {
                "name": "SETTINGS__MCBG__REDIS_PASSWORD",
                "value": "[concat(listKeys(resourceId('Microsoft.Cache/Redis', parameters('redisCacheName')), '2018-03-01').primaryKey)]"
              },
              {
                "name": "REDIS_URL",
                "value": "[concat ('rediss://',parameters('redisCacheName'),'.redis.cache.windows.net:6380')]"
              },
              {
                "name": "WEBSITE_SLOT_POLL_WORKER_FOR_CHANGE_NOTIFICATION",
                "value": "0"
              },
              {
                "name": "SETTINGS__LOGSTASH__HOST",
                "value": "[parameters('logstashHost')]"
              },
              {
                "name": "SETTINGS__LOGSTASH__PORT",
                "value": "[parameters('logstashPort')]"
              },
              {
                "name": "SETTINGS__GCP_API_KEY",
                "value": "[parameters('googleCloudPlatformAPIKey')]"
              }
            ]
          },
          "customHostName": {
            "value": "[parameters('customHostName')]"
          },
          "certificateThumbprint": {
            "value": "[if(greater(length(parameters('customHostname')), 0), reference('app-service-certificate', '2018-11-01').outputs.certificateThumbprint.value, '')]"
          }
        }
      },
      "dependsOn": [
        "app-service-plan",
        "redis-cache"
      ]
    },
    {
      "name": "app-service-logs",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'), 'app-service-logs.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appServiceName": {
            "value": "[variables('appServiceName')]"
          },
          "httpLoggingEnabled": {
            "value": true
          }
        }
      },
      "dependsOn": [
        "app-service"
      ]
    },
    {
      "name": "storage-account",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'), 'storage-account.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          }
        }
      }
    },
    {
      "apiVersion": "2017-05-10",
      "name": "postgresql-server",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'postgresql-server.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "postgresServerName": {
            "value": "[variables('databaseServerName')]"
          },
          "postgresAdminLogin": {
            "value": "[parameters('databaseUsername')]"
          },
          "postgresAdminPassword": {
            "value": "[parameters('databasePassword')]"
          },
          "securityAlertEmailAddress": {
            "value": "[parameters('securityAlertEmail')]"
          },
          "storageAccountName": {
            "value": "[variables('storageAccountName')]"
          }
        }
      },
      "dependsOn": [
        "storage-account"
      ]
    },
    {
      "apiVersion": "2017-05-10",
      "name": "postgresql-database",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'postgresql-database.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "serverName": {
            "value": "[variables('databaseServerName')]"
          },
          "databaseName": {
            "value": "[parameters('databaseName')]"
          }
        }
      },
      "dependsOn": [
        "postgresql-server"
      ]
    },
    {
      "apiVersion": "2017-05-10",
      "name": "postgresql-server-firewall-rules",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'),'postgresql-server-firewall-rules.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "firewallRuleNamePrefix": {
            "value": "[concat(variables('appServicePlanName'),'-AZURE_IP-')]"
          },
          "ipAddresses": {
            "value": "[reference('app-service').outputs.possibleOutboundIpAddresses.value]"
          },
          "serverName": {
            "value": "[variables('databaseServerName')]"
          }
        }
      },
      "dependsOn": [
        "postgresql-server"
      ]
    },
    {
      "apiVersion": "2017-05-10",
      "name": "app-insights",
      "type": "Microsoft.Resources/deployments",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'), 'application-insights.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "appInsightsName": {
            "value": "[variables('appServiceName')]"
          },
          "attachedService": {
            "value": "[variables('appServiceName')]"
          }
        }
      }
    },
    {
      "name": "redis-cache",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBaseDas'), 'redis.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "redisCacheName": {
            "value": "[parameters('redisCacheName')]"
          },
          "enableNonSslPort": {
            "value": false
          }
        }
      }
    },
    {
      "name": "container-instances",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'), 'container-instances.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "containerInstanceName": {
            "value": "[parameters('containerInstanceName')]"
          },
          "containerName": {
            "value": "[parameters('containerName')]"
          },
          "imageName": {
            "value": "[parameters('backgroundContainerImageReference')]"
          },
          "numberCpuCores": {
            "value": "[parameters('containerCPUCores')]"
          },
          "memory": {
            "value": "[parameters('containerMemory')]"
          },
          "networkProfileName": {
            "value":  "[if(greater(length(parameters('vnetProfileName')), 0),parameters('vnetProfileName') , json('null'))]"
          },
          "networkResourceGroup": {
            "value": "[parameters('vnetResourceGroup')]"
          },
          "environmentVariables": {
            "value": [
              {
                "name": "RAILS_ENV",
                "value": "[parameters('railsEnv')]"
              },
              {
                "name": "DB_DATABASE",
                "value": "[parameters('databaseName')]"
              },
              {
                "name": "DB_HOSTNAME",
                "value": "[reference('postgresql-server').outputs.fullyQualifiedDomainName.value]"
              },
              {
                "name": "DB_PASSWORD",
                "secureValue": "[parameters('databasePassword')]"
              },
              {
                "name": "DB_USERNAME",
                "value": "[variables('databaseUsername')]"
              },
              {
                "name": "DB_PORT",
                "value": "[parameters('databasePort')]"
              },
              {
                "name": "SECRET_KEY_BASE",
                "secureValue": "[parameters('secretKeyBase')]"
              },
              {
                "name": "SENTRY_DSN",
                "secureValue": "[parameters('sentryDSNBGFindSync')]"
              },
              {
                "name": "SETTINGS__AUTHENTICATION__SECRET",
                "secureValue": "[parameters('settingsAuthenticationSecret')]"
              },
              {
                "name": "SETTINGS__SEARCH_API__SECRET",
                "secureValue": "[parameters('settingsSearchApiSecret')]"
              },
              {
                "name": "SETTINGS__MCBG__REDIS_PASSWORD",
                "secureValue": "[concat(listKeys(resourceId('Microsoft.Cache/Redis', parameters('redisCacheName')), '2018-03-01').primaryKey)]"
              },
              {
                "name": "REDIS_URL",
                "value": "[concat ('rediss://',parameters('redisCacheName'),'.redis.cache.windows.net:6380')]"
              },
              {
                "name": "SETTINGS__LOGSTASH__HOST",
                "secureValue": "[parameters('logstashHost')]"
              },
              {
                "name": "SETTINGS__LOGSTASH__PORT",
                "secureValue": "[parameters('logstashPort')]"
              }
            ]
          }
        }
      },
      "dependsOn": [
        "redis-cache"
      ]
    },
    {
      "name": "aci-postgres-firewall-rule",
      "condition": "[and(greater(length(parameters('vnetProfileName')), 0),greater(length(parameters('vnetName')), 0),greater(length(parameters('vnetSubnetName')), 0),greater(length(parameters('vnetResourceGroup')), 0))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2017-05-10",
      "dependsOn": [
        "container-instances"
      ],
      "properties": {
        "mode": "Incremental",
        "templateLink": {
          "uri": "[concat(variables('deploymentUrlBase'), 'postgresql-network-server-firewall-rules.json')]",
          "contentVersion": "1.0.0.0"
        },
        "parameters": {
          "serverName": {
            "value": "[variables('databaseServerName')]"
          },
          "subnetResourceIdList": {
            "value": [
              "[resourceId(parameters('vnetResourceGroup'),'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('vnetSubnetName'))]"
            ]
          }
        }
      }
    }
  ],
  "outputs": {
    "AppServiceName": {
      "type": "string",
      "value": "[variables('appServiceName')]"
    }
  }
}
